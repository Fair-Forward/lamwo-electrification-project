import React, { useState, useRef, useEffect, useCallback } from 'react';
import classNames from 'classnames';
import { ConnectedOverlay, useId, GlobalOverlay } from 'rdk';
import { motion } from 'framer-motion';
import FocusTrap from 'focus-trap-react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".Tooltip-module_tooltip__2A0zj {\n  background: var(--color-tooltip);\n  border-radius: 5px;\n  color: var(--color-on-tooltip);\n  padding: 7px;\n  white-space: nowrap;\n  text-align: center;\n  will-change: transform, opacity;\n}\n\n.Tooltip-module_disablePointer__1V598 {\n  pointer-events: none;\n}\n";
var css = {"tooltip":"Tooltip-module_tooltip__2A0zj","disablePointer":"Tooltip-module_disablePointer__1V598"};
styleInject(css_248z);

const tooltips = [];
const Tooltip = (_a) => {
    var { className, children, content, disabled = false, enterDelay = 0, leaveDelay = 200, placement = 'top', trigger = 'hover', visible = false, followCursor = false, closeOnClick = false, closeOnEscape = true, closeOnBodyClick = true, pointerEvents = 'none' } = _a, rest = __rest(_a, ["className", "children", "content", "disabled", "enterDelay", "leaveDelay", "placement", "trigger", "visible", "followCursor", "closeOnClick", "closeOnEscape", "closeOnBodyClick", "pointerEvents"]);
    const [internalVisible, setInternalVisible] = useState(visible);
    const timeout = useRef();
    const mounted = useRef(false);
    const ref = useRef(setInternalVisible);
    useEffect(() => {
        // componentDidUpdateLogic style logic
        if (!mounted.current) {
            mounted.current = true;
        }
        else {
            setInternalVisible(visible);
        }
        return () => {
            clearTimeout(timeout.current);
            deactivate();
        };
    }, [visible]);
    const deactivateAll = useCallback(() => tooltips.forEach((r, i) => {
        r(false);
        tooltips.splice(i, 1);
    }), []);
    const deactivate = useCallback(() => {
        const idx = tooltips.indexOf(ref.current);
        if (idx > -1) {
            setInternalVisible(false);
            tooltips.splice(idx, 1);
        }
    }, []);
    return (React.createElement(ConnectedOverlay, Object.assign({}, rest, { placement: placement, trigger: trigger, followCursor: followCursor, portalClassName: classNames({
            [css.disablePointer]: pointerEvents === 'none',
        }), open: internalVisible, closeOnBodyClick: closeOnBodyClick, closeOnEscape: closeOnEscape, content: () => {
            const contentChildren = typeof content === 'function' ? content() : content;
            if (!contentChildren) {
                return null;
            }
            return (React.createElement(motion.div, { className: classNames(css.tooltip, className), initial: {
                    opacity: 0,
                    scale: 0.3,
                    transition: {
                        when: 'beforeChildren',
                    },
                }, animate: {
                    opacity: 1,
                    scale: 1,
                    transition: {
                        when: 'beforeChildren',
                    },
                }, exit: { opacity: 0, scale: 0.3 }, onClick: () => {
                    if (closeOnClick) {
                        deactivateAll();
                    }
                } }, contentChildren));
        }, onOpen: () => {
            if (!internalVisible) {
                clearTimeout(timeout.current);
                timeout.current = setTimeout(() => {
                    if (!disabled) {
                        deactivateAll();
                        setInternalVisible(true);
                        tooltips.push(ref.current);
                    }
                }, enterDelay);
            }
        }, onClose: () => {
            clearTimeout(timeout.current);
            timeout.current = setTimeout(() => deactivate(), leaveDelay);
        } }), children));
};

var css_248z$1 = ".Popover-module_popover__37iIL {\n  background: var(--color-popover);\n  border-radius: 2px;\n  color: var(--color-on-popover);\n  padding: 14px;\n  will-change: transform, opacity;\n}\n\n  .Popover-module_popover__37iIL.Popover-module_disablePadding__3vGRW {\n    padding: 0;\n  }\n";
var css$1 = {"popover":"Popover-module_popover__37iIL","disablePadding":"Popover-module_disablePadding__3vGRW"};
styleInject(css_248z$1);

const Popover = (_a) => {
    var { closeOnEscape = true, closeOnBodyClick = true, trigger = 'click', leaveDelay = 200, children, content, className, disablePadding, popoverStyle, popoverClassName } = _a, rest = __rest(_a, ["closeOnEscape", "closeOnBodyClick", "trigger", "leaveDelay", "children", "content", "className", "disablePadding", "popoverStyle", "popoverClassName"]);
    const id = useId();
    return (React.createElement(Tooltip, Object.assign({}, rest, { trigger: trigger, pointerEvents: "initial", leaveDelay: leaveDelay, className: classNames(css$1.popover, {
            [css$1.disablePadding]: disablePadding,
        }), content: () => {
            const isContentFunction = typeof content === 'function';
            const children = isContentFunction ? content() : content;
            if (!children) {
                return null;
            }
            return (React.createElement(FocusTrap, { focusTrapOptions: {
                    escapeDeactivates: true,
                    clickOutsideDeactivates: true,
                    fallbackFocus: `#${id}`,
                } },
                React.createElement("div", { id: id, "tab-index": "-1", stlye: popoverStyle, className: popoverClassName }, children)));
        } }), children));
};

var css_248z$2 = ".Dialog-module_dialog__3eIDR {\n  justify-content: center;\n  align-items: center;\n  display: flex;\n  pointer-events: none;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  will-change: transform, opacity;\n}\n\n  .Dialog-module_dialog__3eIDR.Dialog-module_disableHeader__3cwG5 .Dialog-module_content__1qwq9 {\n      padding: 20px;\n    }\n\n  .Dialog-module_dialog__3eIDR.Dialog-module_disablePadding__1FoaN .Dialog-module_content__1qwq9,\n    .Dialog-module_dialog__3eIDR.Dialog-module_disablePadding__1FoaN .Dialog-module_header__292Tt {\n      padding: 0;\n    }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_inner__22ThE {\n    background: var(--color-dialog);\n    color: var(--color-on-dialog);\n    box-sizing: border-box;\n    outline: 0;\n    pointer-events: auto;\n    max-width: 80vw;\n    max-height: 80vh;\n    overflow: auto;\n  }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt {\n    display: flex;\n    padding: 20px 20px 10px 20px;\n  }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt .Dialog-module_headerText__2LqjF {\n      margin: 0;\n      padding: 0;\n      flex: 1;\n      display: inline-flex;\n    }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt .Dialog-module_closeButton__LNtbX {\n      margin: 0 0 0 15px;\n      opacity: 0.8;\n      height: auto;\n      width: auto;\n      min-width: auto;\n      min-height: auto;\n      display: inline-flex;\n      padding: 0;\n      background: none;\n      border: none;\n      cursor: pointer;\n      align-items: center;\n      color: var(--color-on-dialog);\n      font-size: 16px;\n    }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_header__292Tt .Dialog-module_closeButton__LNtbX:focus {\n        outline: none;\n      }\n\n  .Dialog-module_dialog__3eIDR .Dialog-module_content__1qwq9 {\n    padding: 10px 20px 20px 20px;\n  }\n";
var css$2 = {"dialog":"Dialog-module_dialog__3eIDR","disableHeader":"Dialog-module_disableHeader__3cwG5","content":"Dialog-module_content__1qwq9","disablePadding":"Dialog-module_disablePadding__1FoaN","header":"Dialog-module_header__292Tt","inner":"Dialog-module_inner__22ThE","headerText":"Dialog-module_headerText__2LqjF","closeButton":"Dialog-module_closeButton__LNtbX"};
styleInject(css_248z$2);

const Dialog = ({ children, open, className, header, onClose, size = '50%', disablePadding = false, hasBackdrop = true, showCloseButton = true, closeOnBackdropClick = true, closeOnEscape = true, }) => {
    const id = useId();
    return (React.createElement(GlobalOverlay, { open: open, hasBackdrop: hasBackdrop, closeOnEscape: closeOnEscape, closeOnBackdropClick: closeOnBackdropClick, onClose: onClose }, ({ overlayIndex }) => (React.createElement(FocusTrap, { focusTrapOptions: {
            clickOutsideDeactivates: true,
            escapeDeactivates: true,
            fallbackFocus: `#${id}-content`,
        } },
        React.createElement("div", { id: id, "tab-index": "-1" },
            React.createElement(motion.div, { initial: { opacity: 0, y: '-20%' }, animate: { opacity: 1, y: 0 }, exit: { opacity: 0, y: '20%' }, transition: { duration: 0.5, ease: [0.04, 0.62, 0.23, 0.98] }, style: { zIndex: overlayIndex }, className: classNames(css$2.dialog, className, {
                    [css$2.disableHeader]: !header,
                    [css$2.disablePadding]: disablePadding,
                }) },
                React.createElement("div", { className: css$2.inner, style: { width: size } },
                    header && (React.createElement("header", { className: css$2.header },
                        React.createElement("h1", { className: css$2.headerText }, header),
                        showCloseButton && (React.createElement("button", { type: "button", className: css$2.closeButton, onClick: onClose }, "\u2715")))),
                    React.createElement("section", { id: `${id}-content`, className: css$2.content }, typeof children === 'function' ? children() : children))))))));
};

const useDialog = (prop) => {
    const { open, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = useState(open);
    useEffect(() => {
        setInternalOpen(open);
    }, [open]);
    const onCloseInternal = useCallback(() => {
        setInternalOpen(false);
        onClose === null || onClose === void 0 ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = () => {
        setInternalOpen(!open);
    };
    const Component = useCallback((props) => (React.createElement(Dialog, Object.assign({}, props, { open: internalOpen, onClose: onCloseInternal }))), [internalOpen, onCloseInternal]);
    return {
        isOpen: internalOpen,
        setOpen: setInternalOpen,
        toggleOpen: onToggleOpen,
        Dialog: Component,
    };
};

const variants = {
    start: {
        initial: {
            x: '-100%'
        },
        animate: {
            x: '0%'
        }
    },
    end: {
        initial: {
            x: '100%'
        },
        animate: {
            x: '0%'
        }
    },
    top: {
        initial: {
            y: '-100%'
        },
        animate: {
            y: '0%'
        }
    },
    bottom: {
        initial: {
            y: '100%'
        },
        animate: {
            y: '0%'
        }
    }
};

var css_248z$3 = ".Drawer-module_drawer__17v12 {\n  position: fixed;\n  overflow-y: auto;\n  overflow-x: hidden;\n  background: var(--color-drawer);\n  color: var(--color-on-drawer);\n}\n\n  .Drawer-module_drawer__17v12:not(.Drawer-module_disablePadding__EhMMY) .Drawer-module_content__Ky_ZR {\n      padding: 20px 30px;\n    }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_header__UZcJu {\n    display: flex;\n    align-items: center;\n    padding: 20px 30px;\n  }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_header__UZcJu > h1 {\n      margin: 0;\n      flex: 1;\n    }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_closeButton__3FEQA {\n    opacity: 0.8;\n    height: auto;\n    width: auto;\n    min-width: auto;\n    min-height: auto;\n    padding: 0;\n    background: none;\n    border: none;\n    cursor: pointer;\n    color: var(--color-on-drawer);\n    font-size: 16px;\n  }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_closeButton__3FEQA:focus {\n      outline: none;\n    }\n\n  .Drawer-module_drawer__17v12 .Drawer-module_closeButton__3FEQA.Drawer-module_headerlessCloseButton__UEH_K {\n      position: absolute;\n      top: 20px;\n      right: 20px;\n    }\n\n  .Drawer-module_drawer__17v12.Drawer-module_start__qtGuQ,\n  .Drawer-module_drawer__17v12.Drawer-module_end__quCxe {\n    top: 0;\n    bottom: 0;\n    height: 100%;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_start__qtGuQ {\n    left: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_end__quCxe {\n    right: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_top__1xtVG,\n  .Drawer-module_drawer__17v12.Drawer-module_bottom__DKQ-u {\n    width: 100%;\n    left: 0;\n    right: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_top__1xtVG {\n    top: 0;\n  }\n\n  .Drawer-module_drawer__17v12.Drawer-module_bottom__DKQ-u {\n    bottom: 0;\n  }\n\n[dir=\"ltr\"] :export {\n  start-top: Drawer-module_start__qtGuQ;\n  start-left: Drawer-module_start__qtGuQ;\n}\n\n[dir=\"rtl\"] :export {\n  start-top: Drawer-module_start__qtGuQ;\n  start-right: Drawer-module_start__qtGuQ;\n}\n\n[dir=\"ltr\"] :export {\n  end-bottom: Drawer-module_end__quCxe;\n  end-right: Drawer-module_end__quCxe;\n}\n\n[dir=\"rtl\"] :export {\n  end-bottom: Drawer-module_end__quCxe;\n  end-left: Drawer-module_end__quCxe;\n}\n";
var css$3 = {"drawer":"Drawer-module_drawer__17v12","disablePadding":"Drawer-module_disablePadding__EhMMY","content":"Drawer-module_content__Ky_ZR","header":"Drawer-module_header__UZcJu","closeButton":"Drawer-module_closeButton__3FEQA","headerlessCloseButton":"Drawer-module_headerlessCloseButton__UEH_K","top":"Drawer-module_top__1xtVG","bottom":"Drawer-module_bottom__DKQ-u"};
styleInject(css_248z$3);

const Drawer = ({ className, children, open, backdropClassName, header, position = 'end', size = '80%', hasBackdrop = true, closeOnEscape = true, closeOnBackdropClick = true, disablePadding = false, showCloseButton = true, onClose = () => undefined }) => {
    const id = useId();
    const variant = variants[position];
    const style = {
        width: position === 'start' || position === 'end' ? size : 'auto',
        height: position === 'top' || position === 'bottom' ? size : 'auto'
    };
    return (React.createElement(GlobalOverlay, { open: open, hasBackdrop: hasBackdrop, closeOnEscape: closeOnEscape, closeOnBackdropClick: closeOnBackdropClick, onClose: onClose, backdropClassName: backdropClassName }, ({ overlayIndex }) => (React.createElement(FocusTrap, { focusTrapOptions: {
            clickOutsideDeactivates: true,
            escapeDeactivates: true,
            fallbackFocus: `#${id}`
        } },
        React.createElement("div", { id: id, "tab-index": "-1" },
            React.createElement(motion.div, { initial: "initial", animate: "animate", exit: "initial", variants: variant, transition: {
                    duration: 0.5,
                    ease: [0.04, 0.62, 0.23, 0.98],
                    when: 'beforeChildren'
                }, style: Object.assign(Object.assign({}, style), { zIndex: overlayIndex }), className: classNames(css$3.drawer, className, css$3[position], {
                    [css$3.disablePadding]: disablePadding
                }) },
                header && (React.createElement("header", { className: css$3.header },
                    React.createElement("h1", null, header),
                    showCloseButton && (React.createElement("button", { type: "button", className: css$3.closeButton, onClick: onClose }, "\u2715")))),
                !header && showCloseButton && (React.createElement("button", { type: "button", className: classNames(css$3.closeButton, css$3.headerlessCloseButton), onClick: onClose }, "\u2715")),
                React.createElement("div", { className: css$3.content }, typeof children === 'function' ? children() : children)))))));
};

const useDrawer = (prop) => {
    const { open, onClose } = prop || {};
    const [internalOpen, setInternalOpen] = useState(open);
    useEffect(() => {
        setInternalOpen(open);
    }, [open]);
    const onCloseInternal = useCallback(() => {
        setInternalOpen(false);
        onClose === null || onClose === void 0 ? void 0 : onClose();
    }, [onClose]);
    const onToggleOpen = () => {
        setInternalOpen(!internalOpen);
    };
    const Component = useCallback((props) => (React.createElement(Drawer, Object.assign({}, props, { open: internalOpen, onClose: onCloseInternal }))), [internalOpen, onCloseInternal]);
    return {
        isOpen: internalOpen,
        setOpen: setInternalOpen,
        toggleOpen: onToggleOpen,
        Drawer: Component
    };
};

export { Dialog, Drawer, Popover, Tooltip, useDialog, useDrawer };
